// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gate_msg.proto

/*
Package pbgen is a generated protocol buffer package.

It is generated from these files:
	gate_msg.proto
	login_msg.proto
	luarpc_msg.proto
	msg_ids.proto

It has these top-level messages:
	VersionCheck
	Login
	TestData
	LuaRpcMsg
*/
package pbgen

import proto "github.com/Cyinx/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type VersionType int32

const (
	VersionType_VersionGateServer VersionType = 0
	VersionType_VersionDBServer   VersionType = 1
	VersionType_VersionGameServer VersionType = 2
)

var VersionType_name = map[int32]string{
	0: "VersionGateServer",
	1: "VersionDBServer",
	2: "VersionGameServer",
}
var VersionType_value = map[string]int32{
	"VersionGateServer": 0,
	"VersionDBServer":   1,
	"VersionGameServer": 2,
}

func (x VersionType) String() string {
	return proto.EnumName(VersionType_name, int32(x))
}
func (VersionType) EnumDescriptor() ([]byte, []int) { return fileDescriptorGateMsg, []int{0} }

type VersionCheck struct {
	Type int32 `protobuf:"varint,1,opt,name=Type,proto3" json:"Type,omitempty"`
}

func (m *VersionCheck) Reset()                    { *m = VersionCheck{} }
func (m *VersionCheck) String() string            { return proto.CompactTextString(m) }
func (*VersionCheck) ProtoMessage()               {}
func (*VersionCheck) Descriptor() ([]byte, []int) { return fileDescriptorGateMsg, []int{0} }

func (m *VersionCheck) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func init() {
	proto.RegisterType((*VersionCheck)(nil), "pbgen.VersionCheck", func() interface{} { return new(VersionCheck) })
	proto.RegisterEnum("pbgen.VersionType", VersionType_name, VersionType_value)
}
func (m *VersionCheck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VersionCheck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGateMsg(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func encodeVarintGateMsg(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *VersionCheck) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovGateMsg(uint64(m.Type))
	}
	return n
}

func sovGateMsg(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGateMsg(x uint64) (n int) {
	return sovGateMsg(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VersionCheck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VersionCheck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VersionCheck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGateMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGateMsg(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGateMsg
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGateMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGateMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGateMsg
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGateMsg
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGateMsg(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGateMsg = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGateMsg   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("gate_msg.proto", fileDescriptorGateMsg) }

var fileDescriptorGateMsg = []byte{
	// 146 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4b, 0x4f, 0x2c, 0x49,
	0x8d, 0xcf, 0x2d, 0x4e, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2d, 0x48, 0x4a, 0x4f,
	0xcd, 0x53, 0x52, 0xe2, 0xe2, 0x09, 0x4b, 0x2d, 0x2a, 0xce, 0xcc, 0xcf, 0x73, 0xce, 0x48, 0x4d,
	0xce, 0x16, 0x12, 0xe2, 0x62, 0x09, 0xa9, 0x2c, 0x48, 0x95, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x0d,
	0x02, 0xb3, 0xb5, 0x02, 0xb8, 0xb8, 0xa1, 0x6a, 0x40, 0x5c, 0x21, 0x51, 0x2e, 0x41, 0x28, 0xd7,
	0x3d, 0xb1, 0x24, 0x35, 0x38, 0xb5, 0xa8, 0x2c, 0xb5, 0x48, 0x80, 0x41, 0x48, 0x98, 0x8b, 0x1f,
	0x2a, 0xec, 0xe2, 0x04, 0x15, 0x64, 0x44, 0x51, 0x9b, 0x0b, 0x53, 0xcb, 0xe4, 0x24, 0x70, 0xe2,
	0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x90,
	0xc4, 0x06, 0x76, 0x95, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xac, 0xcc, 0x9a, 0x94, 0xa7, 0x00,
	0x00, 0x00,
}
